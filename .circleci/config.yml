version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.1.0
  #terraform: circleci/terraform@3.6.0
  #node: circleci/node@7.1.1

executors:
  default-executor:
    docker:
      - image: cimg/node:22.13.1
    working_directory: ~/project

jobs:
  terraform_apply:
    docker:
      - image: alpine/terragrunt:1.5.7
    parameters:
      stage:
        type: string
        default: dev
    working_directory: ~/project
    steps:
      - checkout

      # Installer les dépendances nécessaires
      - run:
          name: Install dependencies
          command: |
            apk add --no-cache curl python3 py3-pip jq
            pip3 install --upgrade pip
            pip3 install awscli

      # Configurer AWS CLI avec les clés d'accès
      - run:
          name: Configure AWS CLI
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_REGION

      # Initialiser Terraform
      - run:
          name: Terraform Init & Apply
          command: |
            cd infra/stages/<< parameters.stage >>
            terraform init -backend-config=backend.hcl
            terraform apply -auto-approve

  build_and_deploy:
    executor: default-executor
    working_directory: ~/project
    parameters:
      stage:
        type: string
        default: dev
    steps:
      - checkout
      #- node/install-packages
      - run:
          name: Install pnpm
          command: |
            sudo npm install -g pnpm@10.14.0
      - run:
          name: Install dependencies
          command: |
            pnpm install
      - run:
          name: Build Next.js app
          command: |
            cd src
            pnpm gen-robots:<< parameters.stage >>
            pnpm build:<< parameters.stage >>
      - aws-cli/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_REGION
      - run:
          name: Deploy static site to S3
          command: |
            aws s3 sync out s3://$AWS_S3_BUCKET_NAME --delete
      - run:
          name: Invalidate CloudFront Cache
          command: |
            aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_DISTRIBUTION_ID --paths "/*"

workflows:
  deploy-dev:
    when:
      equal: [develop, << pipeline.git.branch >>]
    jobs:
      - terraform_apply:
          context: devandcloud-dev
          stage: dev
      - build_and_deploy:
          context: devandcloud-dev
          stage: dev
          requires:
            - terraform_apply
  deploy-live:
    when:
      equal: [main, << pipeline.git.branch >>]
    jobs:
      - terraform_apply:
          context: devandcloud-live
          stage: live
      - build_and_deploy:
          context: devandcloud-live
          stage: live
          requires:
            - terraform_apply
