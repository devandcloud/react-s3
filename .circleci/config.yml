version: 2.1

orbs:
  aws-cli: circleci/aws-cli@5.4.1
  terraform: circleci/terraform@3.7.0
executors:
  default-executor:
    docker:
      - image: cimg/node:22.13.1
    working_directory: ~/project

jobs:
  terraform_init:
    executor: terraform/default
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/init:
          path: "infra/stages/<< parameters.stage >>"
          backend_config_file: "backend.hcl"
      - persist_to_workspace:
          root: .
          paths:
            - "infra/stages/<< parameters.stage >>"
  terraform_validate:
    executor: terraform/default
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/validate:
          path: "infra/stages/<< parameters.stage >>"

  terraform_plan:
    executor: terraform/default
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/plan:
          path: "infra/stages/<< parameters.stage >>"
          var_file: "terraform.tfvars"
          out: "tfplan"
      - persist_to_workspace:
          root: .
          paths:
            - "infra/stages/<< parameters.stage >>/tfplan"
  terraform_apply:
    executor: terraform/default
    parameters:
      stage:
        type: string
    steps:
      - checkout
      - attach_workspace:
          at: .
      - terraform/apply:
          path: "infra/stages/<< parameters.stage >>"
          plan: "tfplan"

  build_and_deploy:
    executor: default-executor
    working_directory: ~/project
    parameters:
      stage:
        type: string
        default: dev
    steps:
      - checkout
      - run:
          name: Install pnpm
          command: |
            sudo npm install -g pnpm@10.14.0
      - run:
          name: Install dependencies
          command: |
            pnpm install
      - run:
          name: Build Next.js app
          command: |
            cd src
            pnpm gen-robots:<< parameters.stage >>
            pnpm build:<< parameters.stage >>
      - aws-cli/setup:
          aws_access_key_id: AWS_ACCESS_KEY_ID
          aws_secret_access_key: AWS_SECRET_ACCESS_KEY
      - run:
          name: Deploy static site to S3
          command: |
            aws s3 sync build s3://$AWS_S3_BUCKET_NAME --delete
      # - run:
      #     name: Invalidate CloudFront Cache
      #     command: |
      #       cd infra/stages/<< parameters.stage >>
      #       terraform init -backend-config=backend.hcl
      #       CF_ID=$(terraform output -raw cloudfront_id)
      #       echo "CloudFront ID = $CF_ID"
      #       aws cloudfront create-invalidation --distribution-id $CF_ID --paths "/*"

  invalidate-cache:
    docker:
      - image: cimg/base:stable
    steps:
      - attach_workspace:
          at: /tmp
      - run:
          name: Create CloudFront invalidation
          command: |
            CF_ID=$(cat /tmp/cf_id.txt)
            aws cloudfront create-invalidation \
              --distribution-id $CF_ID \
              --paths "/*"
workflows:
  deploy-dev:
    when:
      equal: [develop, << pipeline.git.branch >>]
    jobs:
      - terraform_init:
          name: "Terraform Init"
          stage: dev
          context: react-s3-context

      - terraform_validate:
          name: "Terraform Validate"
          stage: dev
          context: react-s3-context
          requires:
            - "Terraform Init"
      - terraform_plan:
          name: "Terraform Plan"
          stage: dev
          context: react-s3-context
          requires:
            - "Terraform Validate"
      - terraform_apply:
          name: "Terraform Apply"
          stage: dev
          context: react-s3-context
          requires:
            - "Terraform Plan"
      - build_and_deploy:
          name: "Build and Deploy"
          stage: dev
          context: react-s3-context
          requires:
            - "Terraform Apply"
  # deploy-live:
  #   when:
  #     equal: [main, << pipeline.git.branch >>]
  #   jobs:
  #     - terraform_apply:
  #         context: react-s3-live
  #         stage: live
  #     - build_and_deploy:
  #         context: react-s3-live
  #         stage: live
  #         requires:
  #           - terraform_apply
